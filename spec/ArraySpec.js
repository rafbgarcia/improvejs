// Generated by CoffeeScript 1.3.3
(function() {

  describe('Array', function() {
    var arr, arr2, numbers;
    arr = ['Banana', 'Apple', 'Orange'];
    arr2 = ['Banana', 'Apple', 'Orange', 'Pear', 'Papaya'];
    numbers = [455, 354, 1923, 1003, 123, 2, 53];
    describe('#each', function() {
      return it('loops in array', function() {
        var str;
        str = '';
        return arr.each(function(fruit, i) {
          switch (i) {
            case 0:
              return expect(fruit).toEqual('Banana');
            case 1:
              return expect(fruit).toEqual('Apple');
            case 2:
              return expect(fruit).toEqual('Orange');
          }
        });
      });
    });
    describe('#include', function() {
      return it('returns true if array has value', function() {
        expect(arr.include('Banana')).toBeTruthy();
        return expect(arr.include('Banan')).not.toBeTruthy();
      });
    });
    describe('#at', function() {
      it('throws error if from is not specified', function() {
        return expect(arr.at).toThrow();
      });
      it('return element at index', function() {
        expect(arr.at(1)).toEqual('Apple');
        return expect(arr.at(-1)).toEqual('Orange');
      });
      return it('return elements at range', function() {
        expect(arr2.at(-1, 0)).toEqual(['Banana', 'Papaya']);
        expect(arr2.at(-2, 1)).toEqual(['Banana', 'Apple', 'Pear', 'Papaya']);
        expect(arr2.at(-2, -1)).toEqual(['Pear', 'Papaya']);
        expect(arr2.at(-1, -3)).toEqual(['Banana', 'Apple', 'Orange', 'Papaya']);
        expect(arr2.at(1, -1)).toEqual(['Apple', 'Orange', 'Pear', 'Papaya']);
        expect(arr2.at(0, 1)).toEqual(['Banana', 'Apple']);
        return expect(arr2.at(0, -1)).toEqual(['Banana', 'Apple', 'Orange', 'Pear', 'Papaya']);
      });
    });
    describe('#from', function() {
      return it('returns elements from n till last', function() {
        expect(arr2.from(2)).toEqual(['Orange', 'Pear', 'Papaya']);
        expect(arr2.from(-2)).toEqual(['Pear', 'Papaya']);
        expect(arr2.from(0)).toEqual(['Banana', 'Apple', 'Orange', 'Pear', 'Papaya']);
        expect(arr2.from(6)).toEqual([]);
        expect(arr2.from(5)).toEqual([]);
        return expect(arr2.from(-6)).toEqual(['Banana', 'Apple', 'Orange', 'Pear', 'Papaya']);
      });
    });
    describe('#to', function() {
      return it('returns elements from 0 till n', function() {
        expect(arr2.to(2)).toEqual(['Banana', 'Apple', 'Orange']);
        expect(arr2.to(-1)).toEqual(['Banana', 'Apple', 'Orange', 'Pear', 'Papaya']);
        expect(arr2.to(-5)).toEqual(['Banana']);
        return expect(arr2.to(-6)).toEqual([]);
      });
    });
    describe('#first', function() {
      return it('returns first or first n elements', function() {
        expect(arr2.first()).toEqual('Banana');
        return expect(arr2.first(2)).toEqual(['Banana', 'Apple']);
      });
    });
    describe('#last', function() {
      return it('returns last or last n elements', function() {
        expect(arr2.last()).toEqual('Papaya');
        return expect(arr2.last(2)).toEqual(['Pear', 'Papaya']);
      });
    });
    describe('#compact', function() {
      return it('removes empty elements', function() {
        var arr3;
        arr3 = arr.concat(null, '', '  ');
        return expect(arr3.compact()).toEqual(arr);
      });
    });
    describe('#count_if', function() {
      return it('count elements filtered by a condition', function() {
        var count;
        count = arr2.count_if(function(el) {
          return el[0] === 'P';
        });
        return expect(count).toEqual(2);
      });
    });
    describe('#min', function() {
      return it('finds the minimum value in array', function() {
        numbers.push('a word');
        return expect(numbers.min()).toEqual(2);
      });
    });
    describe('#max', function() {
      return it('finds the maximum value in array', function() {
        numbers.push('a word');
        return expect(numbers.max()).toEqual(1923);
      });
    });
    describe('#sum', function() {
      return it('sum all elements in array', function() {
        return expect(numbers.sum()).toEqual(3913);
      });
    });
    describe('#sum_if', function() {
      return it('sum elements in array if it attends the given condition', function() {
        var sum;
        sum = numbers.sum_if(function(val, i) {
          return val < 100;
        });
        return expect(sum).toEqual(55);
      });
    });
    describe('#average', function() {
      return it('returns the average of the elements', function() {
        return expect(numbers.average()).toEqual(559);
      });
    });
    describe('#multiply', function() {
      return it('multiply all elements in array', function() {
        return expect(numbers.multiply()).toEqual(4050474036057540);
      });
    });
    describe('#unique', function() {
      return it('removes duplicated values in array', function() {
        var duplicated;
        duplicated = ['John', 'Smith', 'Foo', 'Smith', 'Bar', 'Bar'];
        return expect(duplicated.uniq()).toEqual(['John', 'Smith', 'Foo', 'Bar']);
      });
    });
    describe('#diff', function() {
      return it('returns the values in array that are not in otherArray', function() {
        return expect(arr2.diff(arr)).toEqual(['Pear', 'Papaya']);
      });
    });
    describe('#diffAll', function() {
      return it('returns all different values between the 2 arrays arrays', function() {
        expect(arr.diffAll(arr2)).toEqual(['Pear', 'Papaya']);
        expect(arr2.diffAll(arr)).toEqual(['Pear', 'Papaya']);
        return expect(arr2.diffAll(arr)).toEqual(['Pear', 'Papaya']);
      });
    });
    describe('#reject', function() {
      it('returns an array without the rejected index', function() {
        expect(arr.delete_at(1)).toEqual(['Banana', 'Orange']);
        return expect(arr.reject(0)).toEqual(['Apple', 'Orange']);
      });
      return it('returns an array without the rejected range', function() {
        expect(arr2.reject(0, -2)).toEqual(['Papaya']);
        expect(arr2.reject(1, -1)).toEqual(['Banana']);
        expect(arr2.delete_at(1, 2)).toEqual(['Banana', 'Pear', 'Papaya']);
        expect(arr2.delete_at(1, -1)).toEqual(['Banana']);
        return expect(arr2.delete_at(0, -1)).toEqual([]);
      });
    });
    return describe('#intersection', function() {
      return it('returns the intersection between arrays', function() {
        expect(arr.intersection(arr2)).toEqual(['Banana', 'Apple', 'Orange']);
        return expect(arr2.intersection(arr)).toEqual(['Banana', 'Apple', 'Orange']);
      });
    });
  });

}).call(this);
