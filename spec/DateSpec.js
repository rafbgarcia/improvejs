// Generated by CoffeeScript 1.3.3
(function() {

  describe('Date', function() {
    describe('#isWeekend', function() {
      return it('checks if is weekend', function() {
        var date;
        date = new Date(2012, 11, 8);
        expect(date.isWeekend()).toBeTruthy();
        date = new Date(2012, 11, 7);
        expect(date.is_weekend()).not.toBeTruthy();
        return expect(date.weekend()).not.toBeTruthy();
      });
    });
    describe('#advance', function() {
      return it('returns advanced time', function() {
        var date, _date, _date2;
        date = new Date(2012, 11, 8);
        _date = new Date(2012, 11, 9);
        _date2 = new Date(2013, 0, 8);
        expect(date.advance(1..day())).toEqual(_date);
        expect(date.advance(12..daysInMonth().days())).toEqual(_date2);
        return expect(date.advance(31..days())).toEqual(_date2);
      });
    });
    describe('#reduce', function() {
      return it('returns reduced time', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2012, 10, 8);
        return expect(date.reduce(10..days_in_month().days())).toEqual(_date);
      });
    });
    describe('#tomorrow', function() {
      return it('returns next day', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2012, 11, 9);
        return expect(date.tomorrow()).toEqual(_date);
      });
    });
    describe('#yesterday', function() {
      return it('returns previous day', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2012, 11, 7);
        return expect(date.yesterday()).toEqual(_date);
      });
    });
    describe('#nextMonth', function() {
      return it('returns next month', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2013, 0, 8);
        return expect(date.nextMonth()).toEqual(_date);
      });
    });
    describe('#lastMonth', function() {
      return it('returns last month', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2012, 10, 8);
        return expect(date.lastMonth()).toEqual(_date);
      });
    });
    describe('#isLeapYear', function() {
      return it('checks if is leap year', function() {
        var date, _date;
        date = new Date(2012, 11, 8);
        _date = new Date(2011, 11, 8);
        expect(date.isLeapYear()).toBeTruthy();
        return expect(_date.isLeapYear()).not.toBeTruthy();
      });
    });
    describe('#nextYear', function() {
      return it('returns next year', function() {
        var date, _date, _date2, _date3;
        date = new Date(2012, 11, 8);
        _date = new Date(2013, 11, 8);
        _date2 = new Date(2012, 0, 8);
        _date3 = new Date(2013, 0, 8);
        return expect(_date2.nextYear()).toEqual(_date3);
      });
    });
    describe('#lastYear', function() {
      return it('returns last year', function() {
        var date, _date, _date2, _date3;
        date = new Date(2012, 11, 8);
        _date = new Date(2011, 11, 8);
        _date2 = new Date(2011, 0, 8);
        _date3 = new Date(2010, 0, 8);
        expect(date.lastYear()).toEqual(_date);
        return expect(_date2.lastYear()).toEqual(_date3);
      });
    });
    describe('#daysInMonth', function() {
      return it('returns the number of days of current date', function() {
        var date;
        date = new Date(2012, 11, 8);
        expect(date.daysInMonth()).toEqual(31);
        date = new Date(2012, 1, 8);
        return expect(date.daysInMonth()).toEqual(29);
      });
    });
    return describe('#daysInYear', function() {
      return it('returns the number of days in current year', function() {
        var date, _date;
        date = new Date(2012, 3, 8);
        _date = new Date(2010, 3, 8);
        expect(date.daysInYear()).toEqual(366);
        return expect(_date.daysInYear()).toEqual(365);
      });
    });
  });

}).call(this);
